import streamlit as st
import pandas as pd
import os
import sys
from joblib import load
import plotly.express as px
import numpy as np
from utils import input_to_features, get_model_value

# A침adir el directorio ra칤z del proyecto al path para importar m칩dulos
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '../../'))
sys.path.append(project_root)

# Cargar modelo
model_path = os.path.join(project_root, 'TPFinal-ML/src/models/saved/xg_opt_over.joblib')
model = load(model_path)

# Diccionario de marcas y modelos
dataset_path = os.path.join(project_root, 'TPFinal-ML/data/CLEAN_APP_DATASET.csv')
df = pd.read_csv(dataset_path)

# Crear un diccionario con las marcas y modelos
car_data = {}
for marca in df['Marca'].unique():
    car_data[marca] = df[df['Marca'] == marca]['Modelo'].unique()

# Crear un diccionario con los modelos y el tipo de combustible
model_combustible_data = {}
for modelo in df['Modelo'].unique():
    model_combustible_data[modelo] = df[df['Modelo'] == modelo]['Tipo de combustible'].unique()

# Crear un diccionario con los modelos y el tipo de motor
model_motor_data = {}
for modelo in df['Modelo'].unique():
    model_motor_data[modelo] = df[df['Modelo'] == modelo]['Motor'].unique()

# Crear un diccionario con los modelos y el color
model_color_data = {}
for modelo in df['Modelo'].unique():
    model_color_data[modelo] = df[df['Modelo'] == modelo]['Color'].unique()

# Crear un diccionario con los modelos y los a침os
model_year_data = {}
for modelo in df['Modelo'].unique():
    model_year_data[modelo] = df[df['Modelo'] == modelo]['A침o'].unique().round().astype(int)

# Crear un diccionario con los modelos y las transmisiones
model_transmision_data = {}
for modelo in df['Modelo'].unique():
    model_transmision_data[modelo] = df[df['Modelo'] == modelo]['Transmisi칩n'].unique()

# Crear un diccionario con los modelos que tienen turbo
model_turbo_data = {}
for modelo in df['Modelo'].unique():
    model_turbo_data[modelo] = df[df['Modelo'] == modelo]['Turbo'].unique()



# Crear la interfaz de Streamlit
st.set_page_config(page_title='Predicci칩n de Precios de SUVs', page_icon='游뚳')


# A침adir un logo
logo_path = os.path.join(project_root, 'TPFinal-ML/extra/logo.png')
if os.path.exists(logo_path):
    st.image(logo_path, use_column_width=True)

st.title('Predicci칩n de Precios de SUVs')

# Sidebar para opciones adicionales
st.sidebar.title('Opciones')
show_data_info = st.sidebar.checkbox('Mostrar Informaci칩n de Datos')
show_explanation = st.sidebar.checkbox('Mostrar Explicaci칩n')

# Secci칩n principal de la aplicaci칩n
with st.expander('Configuraci칩n de SUV'):
    # Selecci칩n de las caracter칤sticas del coche
    marca = st.selectbox('Marca', options=list(car_data.keys()))
    modelo = st.selectbox('Modelo', options=car_data[marca])
    motor = st.selectbox('Motor', options=model_motor_data[modelo])
    kilometraje = st.number_input('Kilometraje', min_value=0, step=1)
    a침o = st.selectbox('A침o', options=sorted(model_year_data[modelo]))
    color = st.selectbox('Color', options=model_color_data[modelo])
    combustible = st.selectbox('Combustible', options=model_combustible_data[modelo])
    transmision = st.selectbox('Transmisi칩n', options=model_transmision_data[modelo])
    if model_turbo_data[modelo][0] == 1:
        turbo = st.selectbox('Turbo', options=['Si', 'No'])
    else:
        turbo = 'No'

    # Crear un diccionario con las caracter칤sticas de entrada
    input_features = {
        'Marca': marca,
        'Modelo': modelo,
        'Motor': motor,
        'Kil칩metros': kilometraje,
        'A침o': a침o,
        'Color': color,
        'Tipo de combustible': combustible,
        'Transmisi칩n': transmision,
        'Turbo': turbo
    }

    # Convertir las caracter칤sticas de entrada a un DataFrame
    input_data = pd.DataFrame([input_features])

    # Mostrar las caracter칤sticas de entrada
    st.subheader('Caracter칤sticas de Entrada:')
    st.write(input_data)

# Visualizaci칩n de datos de entrada si est치 seleccionado
if show_data_info:
    st.subheader('Visualizaci칩n de Datos de Entrada')

    # Gr치fico de depreciaci칩n del precio por a침o del modelo seleccionado
    df_modelo = df[(df['Marca'] == marca) & (df['Modelo'] == modelo)]
 
    a침o_entrada = input_data['A침o'][0]
    # Gr치fico de depreciaci칩n del precio futuro
    a침os_futuros = np.arange(2024, 2030)
    a침os_deprecacion = np.arange(a침o_entrada, a침o_entrada - 6, -1)
    predicciones_futuras = []
    for a침o in a침os_deprecacion:
        input_data_futuro = input_data.copy()
        input_data_futuro['A침o'] = a침o 
        input_data_futuro['Kil칩metros'] = kilometraje + np.abs(a침o - 2024) * 10000
        input_data_transformado_futuro = input_to_features(input_data_futuro)
        prediccion_futura = model.predict(input_data_transformado_futuro)
        predicciones_futuras.append(prediccion_futura[0])
    
    df_predicciones_futuras = pd.DataFrame({'A침o': a침os_futuros, 'Precio': predicciones_futuras})
    fig_depreciacion_futura = px.line(df_predicciones_futuras, x='A침o', y='Precio', title=f'Depreciaci칩n Futura del Precio de {marca} {modelo}')
    st.plotly_chart(fig_depreciacion_futura)
    
    # Gr치fico de valor relativo de los colores del modelo seleccionado
    predicciones_por_motor = []
    for motor in sorted(model_motor_data[modelo]):
        input_data_motor = input_data.copy()
        input_data_motor['Motor'] = motor
        input_data_transformado_motor = input_to_features(input_data_motor)
        prediccion_motor = model.predict(input_data_transformado_motor)
        predicciones_por_motor.append({'Motor': motor, 'Precio': prediccion_motor[0]})
        
    df_predicciones_por_motor = pd.DataFrame(predicciones_por_motor)
    fig_valor_por_motor = px.bar(df_predicciones_por_motor, x='Motor', y='Precio', title=f'Valor Relativo por Motor de {marca} {modelo}', text='Precio')
    fig_valor_por_motor.update_traces(texttemplate='%{text:.2s}', textposition='outside', marker_line_width=0)
    fig_valor_por_motor.update_layout(xaxis_type='category')
    st.plotly_chart(fig_valor_por_motor)


# Bot칩n para realizar la predicci칩n
if st.button('Realizar Predicci칩n'):
    with st.spinner('Realizando Predicci칩n...'):
        # Transformar los datos de entrada
        input_data_transformado = input_to_features(input_data)

        # Realizar la predicci칩n
        prediction = model.predict(input_data_transformado)

        # Mostrar el resultado de la predicci칩n
        st.subheader('Resultado de la Predicci칩n:')
        st.write(f'Usted puede vender su SUV por: ${prediction[0]:,.2f}')

# Explicaci칩n de la predicci칩n si est치 seleccionado
if show_explanation:
    st.subheader('Explicaci칩n de la Predicci칩n:')
        
    # Informaci칩n sobre el modelo XGBoost
    st.write("**Modelo XGBoost:**")
    st.write("""
    XGBoost es un potente algoritmo de aprendizaje autom치tico basado en 치rboles de decisi칩n, conocido por su eficiencia y precisi칩n. Es considerado de los mejores algoritmos para manejo de datos tabulares. Algunas caracter칤sticas clave de XGBoost incluyen:
    - **Boosting**: XGBoost utiliza un proceso de boosting, que combina varios 치rboles de decisi칩n d칠biles para crear un modelo fuerte. Cada nuevo 치rbol corrige los errores de los 치rboles anteriores.
    - **Regularizaci칩n**: Incluye par치metros de regularizaci칩n para prevenir el sobreajuste, lo que permite que el modelo generalice mejor en datos no vistos.
    - **Manejo de datos faltantes**: XGBoost tiene la capacidad de manejar datos faltantes de manera efectiva, identificando los mejores valores de divisi칩n.
    - **Optimizaci칩n de par치metros**: Se ha realizado una exhaustiva optimizaci칩n de hiperpar치metros utilizando una t칠cnica de b칰squeda que se basa en un enfoque probabil칤stico para encontrar la mejor combinaci칩n de par치metros. Este proceso es conocido como optimizaci칩n bayesiana, el cual permite encontrar la mejor combinaci칩n de hiperpar치metros en menos iteraciones.
    """)

    # Informaci칩n adicional sobre la predicci칩n
    st.write("**C칩mo se realiza la predicci칩n:**")
    st.write("""
    Para realizar la predicci칩n, el modelo toma las caracter칤sticas seleccionadas por el usuario, las transforma seg칰n las t칠cnicas de preprocesamiento aplicadas (como la codificaci칩n y la limpieza de las muestras), y luego utiliza estas caracter칤sticas para calcular el precio estimado del SUV. La predicci칩n final es el resultado del modelo XGBoost que ha sido entrenado y optimizado en el conjunto de datos de entrenamiento.
    """)

    # Informaci칩n sobre las caracter칤sticas utilizadas por el modelo
    st.write("**Caracter칤sticas utilizadas por el modelo:**")
    st.write("""
    Nuestro modelo XGBoost utiliza varias caracter칤sticas del SUV para predecir su precio. Estas caracter칤sticas incluyen:
    - **Marca**: La marca del veh칤culo, que puede influir en su valor de mercado debido a la reputaci칩n y fiabilidad percibida.
    - **Modelo**: El modelo espec칤fico, que tiene sus propias caracter칤sticas y niveles de demanda.
    - **Motor**: Tipo de motor, que afecta el rendimiento y la eficiencia del veh칤culo.
    - **Kil칩metros**: El kilometraje del veh칤culo, que es un indicador clave del desgaste y la vida 칰til restante.
    - **A침o**: El a침o de fabricaci칩n, que impacta la depreciaci칩n del valor del veh칤culo.
    - **Color**: El color del veh칤culo, que puede influir en la preferencia del comprador y, por lo tanto, en el precio.
    - **Tipo de combustible**: Tipo de combustible utilizado, que puede afectar tanto los costos operativos como las preferencias de los consumidores.
    - **Transmisi칩n**: Tipo de transmisi칩n (manual o autom치tica), que tambi칠n puede influir en las preferencias de los compradores.
    - **Caracter칤sticas del motor**: Caracter칤sticas espec칤ficas del motor, como la distribuci칩n de cilindros y la alimentaci칩n de aire, que pueden influir en el rendimiento y la eficiencia.         
    """)



